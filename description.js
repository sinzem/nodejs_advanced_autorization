// Проект разделен на две части - клиентская и серверная с соответствующими папками

// Начинаем с server
    // Открываем в отдельном терминале
    // npm init -y - быстрая инициализация
    // npm i express cors cookie-parser
    // npm i dotenv
    // npm i mongodb mongoose
    // npm i nodemon --save-dev (npm run dev - запуск)
    // npm i jsonwebtoken bcrypt uuid
    // npm i nodemailer - для отправки писем
    // npm i express-validator - для валидации данных пользователя при регистрации
    // npm run dev - запускаем сервер
    // Пользователь вносит почту и пароль, пароль шифруется(bcrypt) и шифрованный передается в БД(при необходимости шифруется снова и сравниваются зашифрованные - оригинальный пароль БД не хранит)
    // JWT генерирует два токена - access и refres, в которых зашифровывается почта пользователя и отчет о регистрации. Access хранится недолго и прикрепляется к запросам для поверки авторизации, при наличии refresh токена генерируется новый access. Refresh хранится дольше(30 дней в д.с), после его удаления нужно опять залогиниться
    // Для подтверждения адреса почты на введенный пользователем адрес отправляется письмо со ссылкой на refresh-эндпоинт, к которому крепим случайно сгенерированный номер(на uuid), который также вносим в БД - при совпадении в БД и ссылке вносится соответствующая запись в БД

// Client
    // npx create-react-app my-app --template typescript
    // npm i mobx mobx-react-lite axios @types/axios
    // npm start - запуск приложения

